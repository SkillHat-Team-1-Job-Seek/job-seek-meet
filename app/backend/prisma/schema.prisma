generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                       String            @id @default(uuid())
  name                                     String
  email                                    String            @unique
  password                                 String
  profession                               String?
  location                                 String?
  age                                      Int?
  bio                                      String?
  profileImageUrl                          String?
  isVerified                               String            @default("false")
  verificationToken                        String?
  verificationTokenExpiresAt               DateTime?
  registrationDate                         DateTime          @default(now())
  showAge                                  Boolean           @default(true)
  showProfile                              Boolean           @default(true)
  industry                                 String?
  sentConnections                          Connection[]      @relation("SentConnections")
  receivedConnections                      Connection[]      @relation("ReceivedConnections")
  GroupMembership                          GroupMembership[]
  Message                                  Message[]
  Notification_Notification_senderIdToUser Notification[]    @relation("Notification_senderIdToUser")
  Notification                             Notification[]
  UserChat                                 UserChat[]
  tags                                     Tag[]             @relation("TagToUser")
}

model Connection {
  userId1     String
  userId2     String
  status      ConnectionStatus @default(PENDING)
  connectedAt DateTime?        @default(now())
  updatedAt   DateTime         @updatedAt
  user1       User             @relation("SentConnections", fields: [userId1], references: [id])
  user2       User             @relation("ReceivedConnections", fields: [userId2], references: [id])

  @@id([userId1, userId2])
}

model Group {
  id            String            @id @default(uuid())
  name          String
  description   String?
  groupImageUrl String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  members       GroupMembership[]
}

model GroupMembership {
  id       String   @id @default(uuid())
  userId   String
  groupId  String
  isAdmin  Boolean  @default(false)
  joinedAt DateTime @default(now())
  group    Group    @relation(fields: [groupId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, groupId])
}

model Notification {
  id                               String           @id @default(uuid())
  userId                           String
  type                             NotificationType
  message                          String
  isRead                           Boolean          @default(false)
  createdAt                        DateTime         @default(now())
  updatedAt                        DateTime         @updatedAt
  metadata                         Json?
  senderId                         String?
  sourceId                         String?
  sourceType                       String?
  User_Notification_senderIdToUser User?            @relation("Notification_senderIdToUser", fields: [senderId], references: [id])
  user                             User             @relation(fields: [userId], references: [id])
}

model Chat {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  isGroup   Boolean    @default(false)
  messages  Message[]
  users     UserChat[]
}

model Message {
  id              String    @id @default(uuid())
  message         String
  isEdited        Boolean   @default(false)
  containsBadword Boolean   @default(false)
  oldMessages     Json?
  senderId        String
  type            String    @default("message")
  isRead          Boolean   @default(false)
  replyToId       String?
  chatId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  chat            Chat      @relation(fields: [chatId], references: [id])
  replyTo         Message?  @relation("ReplyRelation", fields: [replyToId], references: [id])
  replies         Message[] @relation("ReplyRelation")
  sender          User      @relation(fields: [senderId], references: [id])
}

model UserChat {
  userId   String
  chatId   String
  joinedAt DateTime @default(now())
  chat     Chat     @relation(fields: [chatId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@id([userId, chatId])
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  users     User[]   @relation("TagToUser")
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
}

enum NotificationType {
  CONNECTION_REQUEST
  CONNECTION_ACCEPTED
  MESSAGE
  OTHER
}
